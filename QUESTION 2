class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def insert_level_order(arr, root, i, n):
    if i < n:
        temp = TreeNode(arr[i])
        root = temp

        root.left = insert_level_order(arr, root.left, 2 * i + 1, n)
        root.right = insert_level_order(arr, root.right, 2 * i + 2, n)

    return root

def construct_bst_from_level_order(arr):
    root = None
    root = insert_level_order(arr, root, 0, len(arr))
    return root

# Example
level_order_arr = [7, 4, 12, 3, 6, 8, 1, 5, 10]
bst_root = construct_bst_from_level_order(level_order_arr)

# Function to print the BST in in-order traversal for verification
def in_order_traversal(node):
    if not node:
        return
    in_order_traversal(node.left)
    print(node.val, end=' ')
    in_order_traversal(node.right)

in_order_traversal(bst_root)
# Output: 1 3 4 5 6 7 8 10 12
