class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def max_subtree_sum(root):
    def find_max_subtree_sum(node):
        nonlocal max_sum
        if not node:
            return 0

        left_sum = max(find_max_subtree_sum(node.left), 0)
        right_sum = max(find_max_subtree_sum(node.right), 0)

        current_sum = node.val + left_sum + right_sum
        max_sum = max(max_sum, current_sum)

        return node.val + max(left_sum, right_sum)

    max_sum = float('-inf')
    find_max_subtree_sum(root)
    return max_sum

# Example 1
root1 = TreeNode(1)
root1.left = TreeNode(2)
root1.right = TreeNode(3)
root1.left.left = TreeNode(4)
root1.left.right = TreeNode(5)
root1.right.left = TreeNode(6)
root1.right.right = TreeNode(7)

print(max_subtree_sum(root1))  # Output: 28

# Example 2
root2 = TreeNode(1)
root2.left = TreeNode(-2)
root2.right = TreeNode(3)
root2.left.left = TreeNode(4)
root2.left.right = TreeNode(5)
root2.right.left = TreeNode(-6)
root2.right.right = TreeNode(2)

print(max_subtree_sum(root2))  # Output: 7
